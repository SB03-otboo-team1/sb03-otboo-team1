name: Deploy to AWS ECS (onepiece)

on:
  push:
    branches: [ main, release ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: one-piece/otboo
  ECS_CLUSTER: onepiece-devil-cluster
  ECS_SERVICE: onepiece-otboo-app-task-service-jfq7knhu
  ECS_TASK_DEFINITION: onepiece-otboo-app-task
  CONTAINER_NAME: otboo1

concurrency:
  group: ecs-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      # 소스코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # Java 17 세팅
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      # AWS 자격 증명 세팅
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Docker 이미지 빌드 및 ECR 푸시
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          chmod +x ./gradlew
          ./gradlew bootJar

          docker build \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            .

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # ECR 이미지 정리 (최근 5개만 유지)
      - name: Clean up old ECR images
        run: |
          echo "Cleaning up old ECR images..."
          REPO="${{ env.ECR_REPOSITORY }}"
          REGION="${{ env.AWS_REGION }}"
          KEEP=5

          # 이미지 목록을 최근 생성 순으로 정렬
          IMAGES=$(aws ecr describe-images \
            --repository-name "$REPO" \
            --region "$REGION" \
            --query 'sort_by(imageDetails,& imagePushedAt)[*].imageDigest' \
            --output text)

          COUNT=$(echo "$IMAGES" | wc -w)

          if [ "$COUNT" -gt "$KEEP" ]; then
            REMOVE=$(echo "$IMAGES" | awk -v keep="$KEEP" '{for(i=1;i<=NF-keep;i++)printf "%s ",$i}')
            echo "Deleting old images, keeping last $KEEP of $COUNT total..."
            for digest in $REMOVE; do
              aws ecr batch-delete-image \
                --repository-name "$REPO" \
                --region "$REGION" \
                --image-ids imageDigest=$digest || true
            done
          else
            echo "No old images to delete. ($COUNT images found)"
          fi

      # 새 이미지로 Task Definition 렌더링
      - name: Render new task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      # ECS 서비스에 새 태스크 정의 배포
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          desired-count: 1
          wait-for-service-stability: true
